from ultralytics import YOLO
import torch
from pathlib import Path

class SafetyDetectionTrainer:
    def __init__(self, data_config="processed_data/dataset.yaml"):
        self.data_config = data_config
        self.model_dir = Path("models")
        self.model_dir.mkdir(exist_ok=True)
        
    def train_model(self, epochs=50, img_size=640, batch_size=16):
        """Train YOLO model for safety detection"""
        
        print("Starting model training...")
        print(f"Using device: {'cuda' if torch.cuda.is_available() else 'cpu'}")
        
        # Load pre-trained YOLOv8 model
        model = YOLO('yolov8n.pt')  # nano version for faster training
        
        # Train the model
        results = model.train(
            data=self.data_config,
            epochs=epochs,
            imgsz=img_size,
            batch=batch_size,
            name='safety_detection',
            patience=10,
            save=True,
            plots=True
        )
        
        # Save the best model
        best_model_path = self.model_dir / "best_safety_model.pt"
        model.save(str(best_model_path))
        
        print(f"Training completed! Best model saved to: {best_model_path}")
        return results
    
    def validate_model(self, model_path="models/best_safety_model.pt"):
        """Validate the trained model"""
        model = YOLO(model_path)
        
        # Run validation
        metrics = model.val(data=self.data_config)
        
        print("Validation Results:")
        print(f"mAP50: {metrics.box.map50:.4f}")
        print(f"mAP50-95: {metrics.box.map:.4f}")
        
        return metrics

if __name__ == "__main__":
    trainer = SafetyDetectionTrainer()
    
    # Train model
    results = trainer.train_model(epochs=30, batch_size=8)  # Reduced for faster training
    
    # Validate model
    trainer.validate_model()
